[{"/Users/jessicadever/workspace/front_end/find-a-farmer/src/index.js":"1","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/Farms.js":"2","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/WelcomePage.js":"3","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/ApplicationViews.js":"4","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/eco/EcoList.js":"5","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/auth/RegisterNonFarmer.js":"6","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/auth/RegisterFarmer.js":"7","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/header/HeaderCard.js":"8","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/eco/EcoProvider.js":"9","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/farm/FarmProvider.js":"10","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/auth/Login.js":"11","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/auth/InitalRegister.js":"12","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/farm/FarmDetails.js":"13","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/farm/FarmList.js":"14","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/eco/EcoCard.js":"15","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/users/UserProvider.js":"16","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/reviews/ReviewEditForm.js":"17","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/reviews/ReviewForm.js":"18","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/reviews/ReviewProvider.js":"19","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/header/LogOutBtn.js":"20","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/farm/FarmCard.js":"21","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/farm/AllFarmsBtn.js":"22","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/reviews/ReviewCard.js":"23","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/farm/FarmFilter.js":"24","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/reviews/ReviewBtns.js":"25","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/pigEdibles/PigEdiblesProvider.js":"26","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/pigEdibles/PigEdiblesList.js":"27","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/pigEdibles/PigEdiblesCard.js":"28"},{"size":326,"mtime":1611953826323,"results":"29","hashOfConfig":"30"},{"size":1972,"mtime":1613875781077,"results":"31","hashOfConfig":"30"},{"size":603,"mtime":1613875167541,"results":"32","hashOfConfig":"30"},{"size":1792,"mtime":1613874840417,"results":"33","hashOfConfig":"30"},{"size":737,"mtime":1613874840425,"results":"34","hashOfConfig":"30"},{"size":6878,"mtime":1613874840424,"results":"35","hashOfConfig":"30"},{"size":10084,"mtime":1613874840423,"results":"36","hashOfConfig":"30"},{"size":1048,"mtime":1613874840428,"results":"37","hashOfConfig":"30"},{"size":727,"mtime":1613100178324,"results":"38","hashOfConfig":"30"},{"size":1132,"mtime":1612807102098,"results":"39","hashOfConfig":"30"},{"size":2940,"mtime":1613874840422,"results":"40","hashOfConfig":"30"},{"size":661,"mtime":1613874840420,"results":"41","hashOfConfig":"30"},{"size":6735,"mtime":1613876600086,"results":"42","hashOfConfig":"30"},{"size":1302,"mtime":1613876187437,"results":"43","hashOfConfig":"30"},{"size":685,"mtime":1613100178324,"results":"44","hashOfConfig":"30"},{"size":876,"mtime":1612807102101,"results":"45","hashOfConfig":"30"},{"size":4862,"mtime":1613874840437,"results":"46","hashOfConfig":"30"},{"size":4703,"mtime":1613874840439,"results":"47","hashOfConfig":"30"},{"size":1840,"mtime":1613100178328,"results":"48","hashOfConfig":"30"},{"size":396,"mtime":1613159795486,"results":"49","hashOfConfig":"30"},{"size":1509,"mtime":1613874840426,"results":"50","hashOfConfig":"30"},{"size":802,"mtime":1613874840425,"results":"51","hashOfConfig":"30"},{"size":1568,"mtime":1613874840437,"results":"52","hashOfConfig":"30"},{"size":1385,"mtime":1612807102098,"results":"53","hashOfConfig":"30"},{"size":1300,"mtime":1613877906299,"results":"54","hashOfConfig":"30"},{"size":1131,"mtime":1613874840436,"results":"55","hashOfConfig":"30"},{"size":1726,"mtime":1613874840435,"results":"56","hashOfConfig":"30"},{"size":1202,"mtime":1613874840435,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1k554lk",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"66"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"66"},"/Users/jessicadever/workspace/front_end/find-a-farmer/src/index.js",[],"/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/Farms.js",[],"/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/WelcomePage.js",[],"/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/ApplicationViews.js",[],["123","124"],"/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/eco/EcoList.js",["125"],"import React, { useContext, useEffect, useState } from \"react\"\nimport { EcoCard } from \"./EcoCard\"\nimport { EcoContext } from \"./EcoProvider\"\nimport \"./Eco.css\"\n\nexport const EcoList = () => {\n\n    const { ecoTips, getEcoTips } = useContext(EcoContext)\n\n    useEffect(() => {  \n        getEcoTips()\n    }, [])\n\n    return (\n        <>\n            <section className=\"ecoContainer\">\n                <h2 className=\"ecoHeader\">Eco Tips</h2>\n                <div className=\"ecoTips\"> \n                    {\n                        ecoTips.map(ecoTip => {\n                            return <EcoCard key={ecoTip.id} ecoTip={ecoTip} />\n                        })\n                    }\n                </div>\n            </section>\n        </>\n    )\n\n}\n\n","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/auth/RegisterNonFarmer.js",["126"],"import React, { useRef, useState } from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport \"./Login.css\"\nimport {Image, Video, Transformation, CloudinaryContext} from 'cloudinary-react';\n\n\nexport const RegisterNonFarmer = (props) => {\n    const firstName = useRef()\n    const lastName = useRef()\n    const username = useRef()\n    const email = useRef()\n    const zip = useRef()\n    const verifyPassword = useRef()\n    const conflictDialog = useRef()\n    const history = useHistory()\n\n    const [imageURL, setImageURL] = useState(\"\")\n\n    const [loading, setLoading] = useState(false)\n    const uploadImage = async e => {\n        const files = e.target.files\n        const data = new FormData()\n        data.append(\"file\", files[0])\n        data.append(\"upload_preset\", \"FindAFarmer\")\n        setLoading(true)\n        const response = await fetch(\n            \"https://api.cloudinary.com/v1_1/jessicadever1/image/upload\",\n            {\n                method: \"POST\",\n                body: data\n            }\n        )\n        const file = await response.json()\n        setImageURL(file.secure_url)\n        setLoading(false)\n    }\n/* -------------------- To check if user already exists -------------------- */\n\n    const existingUserCheck = () => {\n        return fetch(`http://localhost:8014/users?email=${email.current.value}`)\n            .then(res => res.json())\n            .then(user => !!user.length)\n    }\n\n/* -------------------- If user does not exist, then register the user and direct them to logged in page -------------------- */\n\n    const handleRegister = (e) => {\n        e.preventDefault()\n\n        existingUserCheck()\n            .then((userExists) => {\n                if (!userExists) {\n                    fetch(\"http://localhost:8014/users\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            email: email.current.value,\n                            name: `${firstName.current.value} ${lastName.current.value}`,\n                            imageURL: imageURL,\n                            username: username.current.value,\n                            zip: zip.current.value\n                        })\n                    })\n                    .then(res => res.json())\n                    .then(createdUser => {\n                        if (createdUser.hasOwnProperty(\"id\")) {\n                            localStorage.setItem(\"find-a-farm_user\", createdUser.id)\n                            history.push(\"/farms\")\n                        }\n                    })\n                }\n                else {\n                    conflictDialog.current.showModal()\n                }\n            })\n    }\n        \n/* -------------------- The contents of the register user box -------------------- */\n\n    return (\n        <>\n        <section className=\"container--registerNonFarmer\" style={{ textAlign: \"center\" }}>\n        <div className=\"leftSidePaddingNonFarmer\"></div>\n\n            <dialog className=\"dialog dialog--password\" ref={conflictDialog}>\n                <div>Account with that email address already exists</div>\n                <button className=\"button--close\" onClick={e => conflictDialog.current.close()}>Close</button>\n            </dialog>\n\n            <form className=\"form--nonFarmerLogin\" onSubmit={handleRegister}>\n                \n                <h2 className=\"h3 mb-3 font-weight-normal\">Get Started</h2>\n                    <section className=\"form--regNonFarmer\">\n                            <section className=\"firstNameLastNameNonFarmer\">\n                                <fieldset className=\"regInfoStackNonFarmer nameFieldSetNonFarmer\">\n                                    <label htmlFor=\"firstName\" className=\"firstNameNonFarmer\"> First Name </label>\n                                    <input ref={firstName} id=\"firstNameLabelNonFarmer\" type=\"text\" name=\"firstName\" className=\" form-name firstNameLabel\" placeholder=\"First name\" required autoFocus />\n                                </fieldset>\n                                <fieldset className=\"regInfoStackNonFarmer nameFieldSetNonFarmer\">\n                                    <label htmlFor=\"lastName\" className=\"lastNameNonFarmer\"> Last Name </label>\n                                    <input ref={lastName} id=\"lastNameLabelNonFarmer\" type=\"text\" name=\"lastName\" className=\" form-name lastNameLabelNonFarmer\" placeholder=\"Last name\" required />\n                                </fieldset>\n                            </section>\n                    </section>\n                    <section className=\"usernameImageNonFarmer\">\n                        <div className=\"imageNonFarmer\">\n                            <div className=\"uploadImgNonFarmer\">Upload Image</div>\n                                <input className=\"chooseFileBtn\" type=\"file\" name=\"file\" placeholder=\"Upload an image\" onChange={uploadImage}/>\n                                {loading ? (\n                                    <h3>Loading...</h3>\n                                ) : (\n                                        <img src={imageURL} style={{ width: \"100px\" }} />\n                                    )}\n                        </div>\n                        <div className=\"loginLeftNonFarmer\">\n                            <fieldset className=\"regInfoStackNonFarmer\">\n                                <label htmlFor=\"usernameNonFarmer\" className=\"userNameNonFarmer\"> Username </label>\n                                <input ref={username} type=\"text\" name=\"usernameNonFarmer\" id=\"userNameLabelNonFarmer\" className=\" form-username userNameLabelNonFarmer\" placeholder=\"Username\" required />\n                            </fieldset>\n                            <fieldset className=\"regInfoStackNonFarmer\">\n                                <label htmlFor=\"zip\" className=\"zipCodeNonFarmer\">Zip Code</label>\n                                <input ref={zip} type=\"text\" name=\"zip\" id=\"zipCodeLabel\" className=\" zipCodeLabelNonFarmer\" placeholder=\"Zip Code\" required />\n                            </fieldset>\n                            <fieldset className=\"regInfoStackNonFarmer\">\n                                <label htmlFor=\"inputEmail\" className=\"emailAddressNonFarmer\"> Email address </label>\n                                <input ref={email} type=\"email\" name=\"email\" id=\"emailAddressLabel\" className=\" emailAddressLabelNonFarmer\" placeholder=\"Email address\" required />\n                            </fieldset>\n                        </div>\n                </section>\n                            <fieldset className=\"loginBtnFieldsetNonFarmer\">\n                                <button className=\"loginBtnNonFarmer\" type=\"submit\"> Register </button>\n                            </fieldset>\n                \n            </form>\n        <div className=\"rightSidePaddingNonFarmer\"></div>\n        </section>\n    </>\n    )\n}","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/auth/RegisterFarmer.js",["127","128"],"import React, { useRef, useState } from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport { PigEdibles } from \"../pigEdibles/PigEdibles\"\nimport \"./Login.css\"\n\nexport const RegisterFarmer = (props) => {\n    const firstName = useRef()\n    const lastName = useRef()\n    const username = useRef()\n    const email = useRef()\n    const streetAddress = useRef()\n    const city = useRef()\n    const state = useRef()\n    const zip = useRef()\n    const farmName = useRef()\n    const website = useRef()\n    const instructions = useRef()\n    const pigEdibles = useRef()\n    const verifyPassword = useRef()\n    const conflictDialog = useRef()\n    const history = useHistory()\n\n    const [imageURL, setImageURL] = useState(\"\")\n\n    const [loading, setLoading] = useState(false)\n    const uploadImage = async e => {\n        const files = e.target.files\n        const data = new FormData()\n        data.append(\"file\", files[0])\n        data.append(\"upload_preset\", \"FindAFarmer\")\n        setLoading(true)\n        const response = await fetch(\n            \"https://api.cloudinary.com/v1_1/jessicadever1/image/upload\",\n            {\n                method: \"POST\",\n                body: data\n            }\n        )\n        const file = await response.json()\n        setImageURL(file.secure_url)\n        setLoading(false)\n    }\n\n/* -------------------- To check if user already exists -------------------- */\n\n    const existingUserCheck = () => {\n        return fetch(`http://localhost:8014/users?email=${email.current.value}`)\n            .then(res => res.json())\n            .then(user => !!user.length)\n    }\n\n/* -------------------- If user does not exist, then register the user and direct them to logged in page -------------------- */\n\n    const handleRegister = (e) => {\n        e.preventDefault()\n\n        existingUserCheck()\n            .then((userExists) => {\n                if (!userExists) {\n                    fetch(\"http://localhost:8014/users\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            email: email.current.value,\n                            name: `${firstName.current.value} ${lastName.current.value}`,\n                            imageURL: imageURL,\n                            username: username.current.value,\n                            zip: zip.current.value\n                        })\n                    })\n                    .then(\n                        fetch(\"http://localhost:8014/farms\", {\n                            method: \"POST\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            },\n                            body: JSON.stringify({\n                                streetAddress: streetAddress.current.value,\n                                city: city.current.value,\n                                state: \"TN\",\n                                zip: zip.current.value,\n                                farmName: farmName.current.value,\n                                website: website.current.value,\n                                instructions: instructions.current.value,\n                                pigEdibles: [],\n                                imageURL: imageURL\n                            })\n                        })\n                    )\n                    .then(res => res.json())\n                    .then(createdUser => {\n                        if (createdUser.hasOwnProperty(\"id\")) {\n                            localStorage.setItem(\"find-a-farm_user\", createdUser.id)\n                            history.push(\"/farms\")\n                        }\n                    })\n                }\n                else {\n                    conflictDialog.current.showModal()\n                }\n            })\n    }\n\n/* -------------------- The contents of the register user box -------------------- */\n\n    return (\n        <section className=\"container--register\" style={{ textAlign: \"center\" }}>\n\n        <div className=\"leftSidePadding\"></div>\n\n            <dialog className=\"dialog dialog--password\" ref={conflictDialog}>\n                <div>Account with that email address already exists</div>\n                <button className=\"button--close\" onClick={e => conflictDialog.current.close()}>Close</button>\n            </dialog>\n\n            <form className=\"form--nonFarmerLogin\" onSubmit={handleRegister}>\n                \n                <h2 className=\"h3 mb-3 font-weight-normal\">Get Started</h2>\n                    <section className=\"form--regNonFarmer\">\n                            <section className=\"firstNameLastName\">\n                                <fieldset className=\"regInfoStack\">\n                                    <label htmlFor=\"firstName\" className=\"firstName\"> First Name </label>\n                                    <input ref={firstName} id=\"firstNameLabelFarmer\" type=\"text\" name=\"firstName\" className=\"form-control form-name firstNameLabelFarmer\" placeholder=\"First name\" required autoFocus />\n                                </fieldset>\n                                <fieldset className=\"regInfoStack\">\n                                    <label htmlFor=\"lastName\" className=\"lastName\"> Last Name </label>\n                                    <input ref={lastName} id=\"lastNameLabel\" type=\"text\" name=\"lastName\" className=\"form-control form-name lastNameLabel\" placeholder=\"Last name\" required />\n                                </fieldset>\n                            </section>\n                    </section>\n                    <section className=\"usernameImage\">\n                        <div className=\"imageInstructions\">\n                            <div className=\"image\">\n                                <div className=\"uploadImg\">Upload Image</div>\n                                    <input className=\"chooseFileBtn\" type=\"file\" name=\"file\" placeholder=\"Upload an image\" onChange={uploadImage}/>\n                                    {loading ? (\n                                        <h3>Loading...</h3>\n                                    ) : (\n                                            <img src={imageURL} style={{ width: \"100px\" }} />\n                                        )}\n                            </div>\n                            <div className=\"whiteSpace\">\n                                <fieldset className=\"regInfoStack\">\n                                        <label htmlFor=\"instructions\" className=\"instructions\">Instructions</label>\n                                        <textarea white-space=\"pre-wrap\" wrap=\"hard\" ref={instructions} type=\"textarea\" name=\"instructions\" id=\"instructionsLabel\" className=\"form-control instructionsLabel\" placeholder=\"With as much clarity as possible, tell your visitors where and how to drop their slop at your farm.\" required  autoFocus/>\n                                </fieldset>\n                            </div>\n                        </div>\n                        <div className=\"loginLeft\">\n                            <fieldset className=\"regInfoStack\">\n                                <label htmlFor=\"username\" className=\"userName\"> Username </label>\n                                <input ref={username} type=\"text\" name=\"username\" id=\"userNameLabel\" className=\"form-control form-username userNameLabel\" placeholder=\"Username\" required />\n                            </fieldset>\n                            <fieldset className=\"regInfoStack\">\n                                <label htmlFor=\"inputEmail\" className=\"emailAddress\"> Email address </label>\n                                <input ref={email} type=\"email\" name=\"email\" id=\"emailAddressLabel\" className=\"form-control emailAddressLabel\" placeholder=\"Email address\" required />\n                            </fieldset>\n                            <fieldset className=\"regInfoStack\">\n                                <label htmlFor=\"inputFarmName\" className=\"farmName\"> Farm name </label>\n                                <input ref={farmName} type=\"text\" name=\"farmName\" id=\"farmNameLabel\" className=\"form-control farmNameLabel\" placeholder=\"Farm name\" required />\n                            </fieldset>\n                            <fieldset className=\"regInfoStack\">\n                                <label htmlFor=\"inputStreetAddress\" className=\"streetAddress\"> Street address </label>\n                                <input ref={streetAddress} type=\"text\" name=\"streetAddress\" id=\"streetAddressLabel\" className=\"form-control streetAddressLabel\" placeholder=\"Street address\" required />\n                            </fieldset>\n                            <fieldset className=\"regInfoStack\">\n                                <label htmlFor=\"inputCity\" className=\"city\"> City </label>\n                                <input ref={city} type=\"text\" name=\"city\" id=\"cityLabel\" className=\"form-control cityLabel\" placeholder=\"City\" required />\n                            </fieldset>\n                            <fieldset className=\"regInfoStack\">\n                                <label htmlFor=\"zip\" className=\"zipCode\">Zip Code</label>\n                                <input ref={zip} type=\"text\" name=\"zip\" id=\"zipCodeLabel\" className=\"form-control zipCodeLabel\" placeholder=\"Zip Code\" required />\n                            </fieldset>\n                            <fieldset className=\"regInfoStack\">\n                                <label htmlFor=\"website\" className=\"website\">Website URL</label>\n                                <input ref={website} type=\"text\" name=\"website\" id=\"websiteLabel\" className=\"form-control zipCodeLabel\" placeholder=\"Website URL\" required />\n                            </fieldset>\n                        </div>\n                        <div className=\"pigEdiblesDib\">\n                            <h2>Which foods would you like to accept?</h2>\n                            <p>Please check the box for any item that you would like to include on your farm's \"Include\" list. All items with unchecked boxes, will automatically become your \"Exclude\" list.</p>\n                            <PigEdibles />\n                        </div>\n                </section>\n                            <fieldset className=\"loginBtnFieldset\">\n                                <button className=\"loginBtn\" type=\"submit\"> Register </button>\n                            </fieldset>\n                \n            </form>\n            <div className=\"rightSidePadding\"></div>\n        </section>\n    )\n}","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/header/HeaderCard.js",[],"/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/eco/EcoProvider.js",[],"/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/farm/FarmProvider.js",[],"/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/auth/Login.js",[],"/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/auth/InitalRegister.js",[],"/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/farm/FarmDetails.js",["129","130"],"/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/farm/FarmList.js",["131"],"/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/eco/EcoCard.js",[],"/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/users/UserProvider.js",[],"/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/reviews/ReviewEditForm.js",["132","133"],"import React, { useContext, useEffect, useState } from \"react\"\nimport { ReviewContext } from \"../reviews/ReviewProvider\"\nimport { FarmContext } from \"../farm/FarmProvider\"\nimport { useHistory, useParams } from \"react-router-dom\"\nimport \"./Review.css\"\n\n\nexport const ReviewEditForm = () => {\n\n/* -------------------- To have access to farms and reviews -------------------- */\n\n    const { getReviewById, editReview } = useContext(ReviewContext)\n    const { farms, getFarms } = useContext(FarmContext)\n\n/* -------------------- To access userId, and set userId to each review -------------------- */\n\n    const currentUser = localStorage.getItem(\"find-a-farm_user\")\n\n    const [review, setReview] = useState({\n        \"id\": 0,\n        \"userId\": currentUser,\n        \"farmId\": 0,\n        \"date\": \"\",\n        \"name\": \"\",\n        \"reviewText\": \"\",\n        \"farm\": \"\"\n    })\n\n/* -------------------- To have access individual farm that has been selected -------------------- */\n\n    const [farm, setFarm] = useState(\n        {}\n    )\n\n/* -------------------- Use the URL to set the farmId and reviewId -------------------- */\n\n    const { reviewId } = useParams()\n    const history = useHistory()\n\n/* -------------------- To use the farms and get the individual farms by the reviewId, and then to get specific farm -------------------- */\n\n    useEffect(() => {\n        getFarms().then(() => {\n            if (reviewId){\n            \n                getReviewById(parseInt(reviewId))\n                .then(review => {\n                    console.log(\"review\", review)\n                    setReview(review)\n                })\n            } else {\n                console.log(\"yup it's broken\")\n            }\n        })\n    }, [])\n\n/* -------------------- To capture and render the inputs to the form -------------------- */\n\n    const handleControlledInputChange = (event) => {\n        const newReview = { ...review }\n        let selectedVal = event.target.value\n        if (event.target.id.includes(\"Id\")) {\n            selectedVal = parseInt(selectedVal)\n        }\n        newReview[event.target.id] = selectedVal\n        setReview(newReview)\n    }\n\n/* -------------------- To save all of the reviews and then send the user back to the farm they reviewed -------------------- */\n\n    const handleClickSaveReview = () => {\n\n        if (reviewId) {\n            editReview(\n                {\n                    userId: parseInt(review.userId),\n                    username: review.userId.username,\n                    farmId: parseInt(review.farm.id),\n                    date: review.date,\n                    name: review.name,\n                    reviewText:review.reviewText,\n                    farm: farm.name,\n                    id: review.id\n                }\n            ).then(() => history.push(`/farms/detail/${review.farmId}`))\n        } }\n    \n/* -------------------- The contents of the form -------------------- */\n\n    return (\n        <div className=\"formCenterDiv\">\n            <form className=\"reviewForm\" id={farms.id}>\n                <h2 className=\"reviewForm__title\">{farm.name} Review</h2>\n                <fieldset>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"name\">Review name:</label>\n                        <input type=\"text\" id=\"name\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Review name\" value={review.name}/>\n                    </div>\n                </fieldset>\n                <fieldset>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"date\">Date Visited:</label>\n                        <input type=\"date\" id=\"date\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"\" value={review.date}/>\n                    </div>\n                </fieldset>\n                <fieldset>\n                    <div className=\"form-group reviewTextArea\">\n                        <div className=\"\">\n                            <label htmlFor=\"reviewText\">Share your experience:</label>\n                        </div>\n                        <textarea white-space=\"pre-wrap\" wrap=\"hard\" type=\"textarea\" id=\"reviewText\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Tell us all about it!\" value={review.reviewText}/>\n                    </div>\n                </fieldset>\n                <div className=\"centerReviewSubmitBtn\">\n                    <button id={review.farm.id} className=\"btn btn-primary\"\n                        onClick={ event => {\n                            event.preventDefault()\n                            handleClickSaveReview()\n                        }}>\n                        {\"Save Review\"}\n                    </button>\n                </div>\n            </form> \n        </div>\n    )\n}","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/reviews/ReviewForm.js",["134"],"import React, { useContext, useEffect, useState } from \"react\"\nimport { ReviewContext } from \"../reviews/ReviewProvider\"\nimport { FarmContext } from \"../farm/FarmProvider\"\nimport { useHistory, useParams } from \"react-router-dom\"\nimport \"./Review.css\"\n\n\nexport const ReviewForm = () => {\n\n/* -------------------- To have access to farms and reviews -------------------- */\n\n    const { addReview, getReviewById } = useContext(ReviewContext)\n    const { farms, getFarms, getFarmById } = useContext(FarmContext)\n\n/* -------------------- To access userId, and set userId to each review -------------------- */\n\n    const currentUser = localStorage.getItem(\"find-a-farm_user\")\n\n    const [review, setReview] = useState({\n        \"id\": 0,\n        \"userId\": currentUser,\n        \"farmId\": 0,\n        \"date\": \"\",\n        \"name\": \"\",\n        \"reviewText\": \"\",\n        \"farm\": \"\"\n    })\n\n/* -------------------- To have access individual farm that has been selected -------------------- */\n\n    const [farm, setFarm] = useState(\n        {}\n    )\n\n/* -------------------- Use the URL to set the farmId and reviewId -------------------- */\n\n    const { farmId } = useParams()\n    const { reviewId } = useParams()\n    const history = useHistory()\n\n/* -------------------- To use the farms and get the individual farms by the reviewId, and then to get specific farm -------------------- */\n\n    useEffect(() => {\n        getFarms().then(() => {\n            if (reviewId){\n                getReviewById(reviewId)\n                .then(review => {\n                    setReview(review)\n                })\n            } \n        })\n        getFarmById(farmId)\n        .then(farm => {\n            setFarm(farm)\n        })\n    }, [])\n\n/* -------------------- To capture and render the inputs to the form -------------------- */\n\n    const handleControlledInputChange = (event) => {\n        const newReview = { ...review }\n        let selectedVal = event.target.value\n        if (event.target.id.includes(\"Id\")) {\n            selectedVal = parseInt(selectedVal)\n        }\n        newReview[event.target.id] = selectedVal\n        setReview(newReview)\n    }\n\n/* -------------------- To save all of the reviews and then send the user back to the farm they reviewed -------------------- */\n\n    const handleClickSaveReview = (event) => {\n        event.preventDefault()\n        \n            addReview({\n                userId: parseInt(review.userId),\n                username: review.userId.username,\n                farmId: parseInt(farmId),\n                date: review.date,\n                name: review.name,\n                reviewText:review.reviewText,\n                farm: farm.name\n            })\n            .then(() => history.push(`/farms/detail/${farmId}`))\n        }\n    \n/* -------------------- The contents of the form -------------------- */\n\n    return (\n        <div className=\"formCenterDiv\">\n            <form className=\"reviewForm\" id={farms.id}>\n                <h2 className=\"reviewForm__title\">{farm.name} Review</h2>\n                <fieldset>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"name\">Review name:</label>\n                        <input type=\"text\" id=\"name\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Review name\" value={review.name}/>\n                    </div>\n                </fieldset>\n                <fieldset>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"date\">Date Visited:</label>\n                        <input type=\"date\" id=\"date\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"\" value={review.date}/>\n                    </div>\n                </fieldset>\n                <fieldset>\n                    <div className=\"form-group reviewTextArea\">\n                        <div className=\"\">\n                            <label htmlFor=\"reviewText\">Share your experience:</label>\n                        </div>\n                        <textarea white-space=\"pre-wrap\" wrap=\"hard\" type=\"textarea\" id=\"reviewText\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Tell us all about it!\" value={review.reviewText}/>\n                    </div>\n                </fieldset>\n                <div className=\"centerReviewSubmitBtn\">\n                    <button id={review.farmId} className=\"btn btn-primary\"\n                        onClick={ \n                            handleClickSaveReview\n                        }>\n                        Save Review\n                    </button>\n                </div>\n            </form> \n        </div>\n    )\n}","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/reviews/ReviewProvider.js",[],"/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/header/LogOutBtn.js",[],"/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/farm/FarmCard.js",[],"/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/farm/AllFarmsBtn.js",["135","136"],"import \"./Farm.css\"\nimport { Link } from \"react-router-dom\"\nimport { FarmContext } from \"./FarmProvider\"\nimport React, { useContext, useEffect, useState } from \"react\"\n\nexport const AllFarmsBtn = () => {\n\n/* -------------------- To be able to work with all of the farm data -------------------- */\n\n    const { getFarms } = useContext(FarmContext)\n    const [farms, setFarms] = useState([])\n    \n/* -------------------- To render all of the farms, if user has filtered farms -------------------- */\n\n    const handleSeeAllFarmsClick = () => {\n            getFarms()\n            .then(setFarms)\n    }\n\n/* -------------------- The farm button -------------------- */\n\n    return (\n        <div className=\"allFarmsBtnDiv\">\n            <button onClick={handleSeeAllFarmsClick} className=\"allFarmsBtn\">See All Farms</button>\n        </div>\n    )\n}","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/reviews/ReviewCard.js",[],"/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/farm/FarmFilter.js",[],"/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/reviews/ReviewBtns.js",[],"/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/pigEdibles/PigEdiblesProvider.js",[],"/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/pigEdibles/PigEdiblesList.js",["137"],"import React, {useContext, useEffect } from \"react\"\nimport { PigEdiblesContext } from \"./PigEdiblesProvider\"\nimport { PigEdiblesCard } from \"./PigEdiblesCard\"\nimport { Link } from \"react-router-dom\"\nimport \"./PigEdibles.css\"\n\nexport const PigEdiblesList = () => {\n    const { pigEdibles, getPigEdibles } = useContext(PigEdiblesContext)\n\n    useEffect(()=> {\n        getPigEdibles()\n    }, [])\n\n\n    return (\n        <>\n            <div className=\"checkListDisplay\">\n                <div className=\"leftSidePadding\"></div>\n                    <section className=\"\">\n                        <div className=\"pigEdiblesDiv\">\n                                            <h2>Which foods would you like to accept?</h2>\n                                            <p>Please check the box for any item that you would like to encourage visitors to feed your pigs. The list of items that are checked will become your farm's \"Include\" list. All items with unchecked boxes, will automatically become your \"Exclude\" list.</p>\n                                        </div>\n                        <div className=\"pigEdiblesList\">\n                            {\n                                pigEdibles.map(pigEdible => {\n                                    return <PigEdiblesCard key={pigEdible.id} pigEdible={pigEdible} />\n                                })\n                            }\n                        </div>\n                        <div className=\"completeRegBtnDiv\">\n                            <Link to=\"/farms\"><button className=\"completeRegBtn\">Save</button></Link>\n                        </div>\n                    </section>\n                <div className=\"rightSidePadding\"></div>\n            </div>\n        </>\n    )\n}","/Users/jessicadever/workspace/front_end/find-a-farmer/src/components/pigEdibles/PigEdiblesCard.js",["138","139","140"],"import React, { useContext, useEffect, useState } from \"react\"\nimport { PigEdiblesContext } from \"./PigEdiblesProvider\"\nimport \"./PigEdibles.css\"\n\nexport const PigEdiblesCard = ({ pigEdible }) => {\n\n    const { pigEdibles, getPigEdibles } = useContext(PigEdiblesContext)\n\n    // const [pigEdible, setPigEdible] = useState({\n    //     \"id\": 0,\n    //     \"name\": \"\",\n    //     \"checked\": false\n    // })\n\n    useEffect(()=> {\n        getPigEdibles()\n    }, [])\n\n    const handleCheckBox = (event) => {\n        // const newPigEdible = {...pigEdible}\n        // let selectedVal = event.target.checked\n        // newPigEdible[event.target.checked] =selectedVal\n        // setPigEdible(newPigEdible)\n        console.log(\"nothing works.\")\n    }\n    \n    return (\n        <>\n            <div className=\"checklistDiv\">\n                <fieldset className=\"checkListFieldset\" >\n                    <label htmlFor=\"checkboxLabel\" className=\"checkboxLabel\"> {pigEdible.name}</label>\n                    <input value={pigEdible.checked} type=\"checkbox\" name=\"checkboxLabel\" id=\"checkboxLabel\" className=\"checkbox\" onChange={handleCheckBox}/>\n                </fieldset>\n            </div>    \n        </>\n    )\n}",{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":12,"column":8,"nodeType":"147","endLine":12,"endColumn":10,"suggestions":"148"},{"ruleId":"149","severity":1,"message":"150","line":112,"column":41,"nodeType":"151","endLine":112,"endColumn":90},{"ruleId":"152","severity":1,"message":"153","line":6,"column":11,"nodeType":"154","messageId":"155","endLine":6,"endColumn":13},{"ruleId":"149","severity":1,"message":"150","line":137,"column":45,"nodeType":"151","endLine":137,"endColumn":94},{"ruleId":"145","severity":1,"message":"156","line":33,"column":8,"nodeType":"147","endLine":33,"endColumn":10,"suggestions":"157"},{"ruleId":"145","severity":1,"message":"158","line":37,"column":8,"nodeType":"147","endLine":37,"endColumn":10,"suggestions":"159"},{"ruleId":"145","severity":1,"message":"160","line":16,"column":8,"nodeType":"147","endLine":16,"endColumn":10,"suggestions":"161"},{"ruleId":"152","severity":1,"message":"162","line":31,"column":18,"nodeType":"154","messageId":"155","endLine":31,"endColumn":25},{"ruleId":"145","severity":1,"message":"163","line":55,"column":8,"nodeType":"147","endLine":55,"endColumn":10,"suggestions":"164"},{"ruleId":"145","severity":1,"message":"165","line":56,"column":8,"nodeType":"147","endLine":56,"endColumn":10,"suggestions":"166"},{"ruleId":"152","severity":1,"message":"167","line":3,"column":29,"nodeType":"154","messageId":"155","endLine":3,"endColumn":38},{"ruleId":"152","severity":1,"message":"168","line":10,"column":12,"nodeType":"154","messageId":"155","endLine":10,"endColumn":17},{"ruleId":"145","severity":1,"message":"169","line":12,"column":8,"nodeType":"147","endLine":12,"endColumn":10,"suggestions":"170"},{"ruleId":"152","severity":1,"message":"171","line":1,"column":40,"nodeType":"154","messageId":"155","endLine":1,"endColumn":48},{"ruleId":"152","severity":1,"message":"172","line":7,"column":13,"nodeType":"154","messageId":"155","endLine":7,"endColumn":23},{"ruleId":"145","severity":1,"message":"169","line":17,"column":8,"nodeType":"147","endLine":17,"endColumn":10,"suggestions":"173"},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getEcoTips'. Either include it or remove the dependency array.","ArrayExpression",["176"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'id' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'farmId' and 'getFarmById'. Either include them or remove the dependency array.",["177"],"React Hook useEffect has a missing dependency: 'getReviews'. Either include it or remove the dependency array.",["178"],"React Hook useEffect has a missing dependency: 'getFarms'. Either include it or remove the dependency array.",["179"],"'setFarm' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getFarms', 'getReviewById', and 'reviewId'. Either include them or remove the dependency array.",["180"],"React Hook useEffect has missing dependencies: 'farmId', 'getFarmById', 'getFarms', 'getReviewById', and 'reviewId'. Either include them or remove the dependency array.",["181"],"'useEffect' is defined but never used.","'farms' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getPigEdibles'. Either include it or remove the dependency array.",["182"],"'useState' is defined but never used.","'pigEdibles' is assigned a value but never used.",["183"],"no-global-assign","no-unsafe-negation",{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"196","fix":"198"},"Update the dependencies array to be: [getEcoTips]",{"range":"199","text":"200"},"Update the dependencies array to be: [farmId, getFarmById]",{"range":"201","text":"202"},"Update the dependencies array to be: [getReviews]",{"range":"203","text":"204"},"Update the dependencies array to be: [getFarms]",{"range":"205","text":"206"},"Update the dependencies array to be: [getFarms, getReviewById, reviewId]",{"range":"207","text":"208"},"Update the dependencies array to be: [farmId, getFarmById, getFarms, getReviewById, reviewId]",{"range":"209","text":"210"},"Update the dependencies array to be: [getPigEdibles]",{"range":"211","text":"212"},{"range":"213","text":"212"},[296,298],"[getEcoTips]",[1177,1179],"[farmId, getFarmById]",[1232,1234],"[getReviews]",[467,469],"[getFarms]",[1719,1721],"[getFarms, getReviewById, reviewId]",[1711,1713],"[farmId, getFarmById, getFarms, getReviewById, reviewId]",[389,391],"[getPigEdibles]",[458,460]]